// This test is generated by GitHub Copilot, then modified by me.
// I'd need to spend some time digging into this test file to fully understand
// how Golang tests work.

package post

import (
	"context"
	"database/sql"
	"testing"

	"github.com/DATA-DOG/go-sqlmock"
)

var dbOpen = sql.Open

func TestGetAllPosts(t *testing.T) {
	db, mock, err := sqlmock.New()
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()

	rows := sqlmock.NewRows([]string{"id", "title", "desc", "createdAt", "updatedAt", "published"}).
		AddRow(1, "Test Title", "Test Description", "2021-01-01", "2021-01-01", true)
	mock.ExpectQuery(`SELECT id, title, "desc", "createdAt", "updatedAt", published FROM "Post"`).WillReturnRows(rows)

	originalOpen := dbOpen
	defer func() { dbOpen = originalOpen }()
	dbOpen = func(driverName, dataSourceName string) (*sql.DB, error) {
		return db, nil
	}

	_, err = GetAllPosts(context.Background())
	if err != nil {
		t.Errorf("error was not expected while getting posts: %s", err)
	}
}

func TestGetPostByID(t *testing.T) {
	db, mock, err := sqlmock.New()
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()

	rows := sqlmock.NewRows([]string{"id", "title", "desc", "createdAt", "updatedAt", "published"}).
		AddRow(1, "Test Title", "Test Description", "2021-01-01", "2021-01-01", true)
	mock.ExpectQuery(`SELECT id, title, "desc", "createdAt", "updatedAt", published FROM "Post" WHERE id = \$1`).WithArgs("1").WillReturnRows(rows)

	originalOpen := dbOpen
	defer func() { dbOpen = originalOpen }()
	dbOpen = func(driverName, dataSourceName string) (*sql.DB, error) {
		return db, nil
	}

	_, err = GetPostByID(context.Background(), "1")
	if err != nil {
		t.Errorf("error was not expected while getting post by ID: %s", err)
	}
}
